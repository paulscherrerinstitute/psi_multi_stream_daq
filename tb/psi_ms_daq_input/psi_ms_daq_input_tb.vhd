------------------------------------------------------------------------------
--  Copyright (c) 2019 by Paul Scherrer Institute, Switzerland
--  All rights reserved.
--  Authors: Oliver Bruendler
------------------------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

library work;
	use work.psi_common_math_pkg.all;
	use work.psi_ms_daq_pkg.all;

library work;
	use work.psi_tb_txt_util.all;

library work;
	use work.psi_ms_daq_input_tb_pkg.all;

library work;
	use work.psi_ms_daq_input_tb_case_single_frame.all;
	use work.psi_ms_daq_input_tb_case_multi_frame.all;
	use work.psi_ms_daq_input_tb_case_timeout.all;
	use work.psi_ms_daq_input_tb_case_ts_overflow.all;
	use work.psi_ms_daq_input_tb_case_trig_in_posttrig.all;
	use work.psi_ms_daq_input_tb_case_always_trig.all;
	use work.psi_ms_daq_input_tb_case_backpressure.all;
	use work.psi_ms_daq_input_tb_case_modes.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_ms_daq_input_tb is
	generic (
		StreamWidth_g 	: positive	:= 16;
		VldPulsed_g		: boolean	:= false
	);
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_ms_daq_input_tb is
	-- *** Fixed Generics ***
	constant StreamBuffer_g : positive := 32;
	constant StreamTimeout_g : real := 10.0e-6;
	constant StreamClkFreq_g : real := 125.0e6;
	constant StreamTsFifoDepth_g : positive := 8;
	constant StreamUseTs_g : boolean := true;
	
	-- *** Not Assigned Generics (default values) ***
	
	-- *** Exported Generics ***
	constant Generics_c : Generics_t := (
		StreamWidth_g 	=> StreamWidth_g,
		VldPulsed_g		=> VldPulsed_g);
	
	-- *** TB Control ***
	signal TbRunning : boolean := True;
	signal NextCase : integer := -1;
	signal ProcessDone : std_logic_vector(0 to 1) := (others => '0');
	constant AllProcessesDone_c : std_logic_vector(0 to 1) := (others => '1');
	constant TbProcNr_stream_c : integer := 0;
	constant TbProcNr_daq_c : integer := 1;
	
	-- *** DUT Signals ***
	signal Str_Clk : std_logic := '1';
	signal Str_Vld : std_logic := '0';
	signal Str_Rdy : std_logic := '0';
	signal Str_Data : std_logic_vector(StreamWidth_g-1 downto 0) := (others => '0');
	signal Str_Trig : std_logic := '0';
	signal Str_Ts : std_logic_vector(63 downto 0) := (others => '0');
	signal ClkReg : std_logic := '1';
	signal RstReg : std_logic := '1';
	signal ClkMem : std_logic := '1';
	signal RstMem : std_logic := '1';
	signal PostTrigSpls : std_logic_vector(31 downto 0) := (others => '0');
	signal Mode : RecMode_t := (others => '0');
	signal Arm : std_logic := '0';
	signal IsArmed : std_logic := '0';
	signal IsRecording : std_logic := '0';
	signal ToDisable : std_logic := '0';
	signal FrameTo : std_logic := '0';
	signal Daq_Vld : std_logic := '0';
	signal Daq_Rdy : std_logic := '0';
	signal Daq_Data : Input2Daq_Data_t(Data(IntDataWidth_g-1 downto 0), Bytes(log2ceil(IntDataWidth_g/8) downto 0));
	signal Daq_Level : std_logic_vector(15 downto 0) := (others => '0');
	signal Daq_HasLast : std_logic := '0';
	signal Ts_Vld : std_logic := '0';
	signal Ts_Rdy : std_logic := '0';
	signal Ts_Data : std_logic_vector(63 downto 0) := (others => '0');
	
begin
	------------------------------------------------------------
	-- DUT Instantiation
	------------------------------------------------------------
	i_dut : entity work.psi_ms_daq_input
		generic map (
			StreamWidth_g => StreamWidth_g,
			StreamBuffer_g => StreamBuffer_g,
			StreamTimeout_g => StreamTimeout_g,
			StreamClkFreq_g => StreamClkFreq_g,
			StreamTsFifoDepth_g => StreamTsFifoDepth_g,
			StreamUseTs_g => StreamUseTs_g
		)
		port map (
			Str_Clk => Str_Clk,
			Str_Vld => Str_Vld,
			Str_Rdy => Str_Rdy,
			Str_Data => Str_Data,
			Str_Trig => Str_Trig,
			Str_Ts => Str_Ts,
			ClkReg => ClkReg,
			RstReg => RstReg,
			PostTrigSpls => PostTrigSpls,
			Mode => Mode,
			Arm => Arm,
			IsArmed => IsArmed,
			IsRecording => IsRecording,
			ToDisable => ToDisable,
			FrameTo => FrameTo,
			ClkMem => ClkMem,
			RstMem => RstMem,
			Daq_Vld => Daq_Vld,
			Daq_Rdy => Daq_Rdy,
			Daq_Data => Daq_Data,
			Daq_Level => Daq_Level,
			Daq_HasLast => Daq_HasLast,
			Ts_Vld => Ts_Vld,
			Ts_Rdy => Ts_Rdy,
			Ts_Data => Ts_Data
		);
	
	------------------------------------------------------------
	-- Testbench Control !DO NOT EDIT!
	------------------------------------------------------------
	p_tb_control : process
	begin
		wait until RstReg = '0' and RstMem = '0';
		-- single_frame
		NextCase <= 0;
		wait until ProcessDone = AllProcessesDone_c;
		-- multi_frame
		NextCase <= 1;
		wait until ProcessDone = AllProcessesDone_c;
		-- timeout
		NextCase <= 2;
		wait until ProcessDone = AllProcessesDone_c;
		-- ts_overflow
		NextCase <= 3;
		wait until ProcessDone = AllProcessesDone_c;
		-- trig_in_posttrig
		NextCase <= 4;
		wait until ProcessDone = AllProcessesDone_c;
		-- always_trig
		NextCase <= 5;
		wait until ProcessDone = AllProcessesDone_c;
		-- backpressure
		NextCase <= 6;
		wait until ProcessDone = AllProcessesDone_c;
		-- modes
		NextCase <= 7;
		wait until ProcessDone = AllProcessesDone_c;
		TbRunning <= false;
		wait;
	end process;
	
	------------------------------------------------------------
	-- Clocks !DO NOT EDIT!
	------------------------------------------------------------
	p_clock_Str_Clk : process
		constant Frequency_c : real := real(125e6);
	begin
		while TbRunning loop
			wait for 0.5*(1 sec)/Frequency_c;
			Str_Clk <= not Str_Clk;
		end loop;
		wait;
	end process;
	
	p_clock_ClkMem : process
		constant Frequency_c : real := real(200e6);
	begin
		while TbRunning loop
			wait for 0.5*(1 sec)/Frequency_c;
			ClkMem <= not ClkMem;
		end loop;
		wait;
	end process;
	
	p_clock_ClkReg : process
		constant Frequency_c : real := real(166e6);
	begin
		while TbRunning loop
			wait for 0.5*(1 sec)/Frequency_c;
			ClkReg <= not ClkReg;
		end loop;
		wait;
	end process;	
	
	
	------------------------------------------------------------
	-- Resets
	------------------------------------------------------------
	p_rst_Rst : process
	begin
		wait for 1 us;
		-- Wait for two clk edges to ensure reset is active for at least one edge
		wait until rising_edge(ClkMem);
		wait until rising_edge(ClkMem);
		RstMem <= '0';
		wait until rising_edge(ClkReg);
		wait until rising_edge(ClkReg);
		RstReg <= '0';		
		wait;
	end process;
	
	
	------------------------------------------------------------
	-- Processes !DO NOT EDIT!
	------------------------------------------------------------
	-- *** stream ***
	p_stream : process
	begin
		-- single_frame
		wait until NextCase = 0;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_single_frame.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- multi_frame
		wait until NextCase = 1;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_multi_frame.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- timeout
		wait until NextCase = 2;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_timeout.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- ts_overflow
		wait until NextCase = 3;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_ts_overflow.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- trig_in_posttrig
		wait until NextCase = 4;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_trig_in_posttrig.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- always_trig
		wait until NextCase = 5;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_always_trig.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- backpressure
		wait until NextCase = 6;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_backpressure.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		-- modes
		wait until NextCase = 7;
		ProcessDone(TbProcNr_stream_c) <= '0';
		work.psi_ms_daq_input_tb_case_modes.stream(Str_Clk, Str_Vld, Str_Rdy, Str_Data, Str_Trig, Str_Ts, ClkReg, Arm, IsArmed, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_stream_c) <= '1';
		wait;
	end process;
	
	-- *** daq ***
	p_daq : process
	begin
		-- single_frame
		wait until NextCase = 0;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_single_frame.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- multi_frame
		wait until NextCase = 1;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_multi_frame.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- timeout
		wait until NextCase = 2;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_timeout.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- ts_overflow
		wait until NextCase = 3;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_ts_overflow.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- trig_in_posttrig
		wait until NextCase = 4;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_trig_in_posttrig.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- always_trig
		wait until NextCase = 5;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_always_trig.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- backpressure
		wait until NextCase = 6;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_backpressure.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		-- modes
		wait until NextCase = 7;
		ProcessDone(TbProcNr_daq_c) <= '0';
		work.psi_ms_daq_input_tb_case_modes.daq(ClkMem, PostTrigSpls, Mode, Daq_Vld, Daq_Rdy, Daq_Data, Daq_Level, Daq_HasLast, Ts_Vld, Ts_Rdy, Ts_Data, Generics_c);
		wait for 1 ps;
		ProcessDone(TbProcNr_daq_c) <= '1';
		wait;
	end process;
	
	
end;
